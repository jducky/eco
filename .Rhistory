shiny::runApp('C:/Motive/ecosystem')
runApp('C:/Motive/ecosystem')
install.packages("shinyWidgets")
runApp('C:/Motive/ecosystem')
install.packages("shinyFiles")
runApp('C:/Motive/ecosystem')
install.packages("leaflet")
runApp('C:/Motive/ecosystem')
install.packages("dplyr")
runApp('C:/Motive/ecosystem')
install.packages("maps")
runApp('C:/Motive/ecosystem')
install.packages("shinyalert")
runApp('C:/Motive/ecosystem')
install.packages("tiff")
runApp('C:/Motive/ecosystem')
install.packages("rgdal")
runApp('C:/Motive/ecosystem')
install.packages("sf")
runApp('C:/Motive/ecosystem')
install.packages("SDMTools")
runApp('C:/Motive/ecosystem')
install.packages("proj4")
runApp('C:/Motive/ecosystem')
install.packages("gdata")
runApp('C:/Motive/ecosystem')
install.packages("ggthemes")
shiny::runApp('C:/Projects/openfda-dashboard-master')
install.packages("DT")
shiny::runApp('C:/MOTIVE_Ecosystem/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
shiny::runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
library('leaflet')
# Fake data
df <- data.frame(lng = c(-5, -10, -15, -20, 25),
lat = c(8, 12, 33, 4, 18),
size = c(200000, 100000, 800000, 250000, 350000),
popup = c('A', 'B', 'C', 'D', 'E'),
type = c('A', 'B', 'C', 'D', 'E'),
stringsAsFactors = FALSE)
# If you want to set your own colors manually:
pal <- colorFactor(
palette = c('red', 'blue', 'green', 'purple', 'orange'),
domain = df$type
)
# If you want to use predefined palettes in the RColorBrewer package:
# Call RColorBrewer::display.brewer.all() to see all possible palettes
pal <- colorFactor(
palette = 'Dark2',
domain = df$type
)
leaflet(df) %>%
addTiles() %>%
addCircles(lng = ~lng, lat = ~lat, weight = 1,
radius = ~size, popup = ~popup, color = ~pal(type))
leaflet(df) %>%
addTiles() %>%
addCircles(lng = ~lng, lat = ~lat, weight = 1,
radius = ~size, popup = ~popup, color = ~pal(type))
leaflet(df) %>%
addTiles() %>%
addCircles(lng = ~lng, lat = ~lat, weight = 1,
radius = ~size, popup = ~popup, color = ~pal(type))
df
leaflet(df) %>%
addTiles() %>%
addMarkers(lng = ~lng, lat = ~lat, weight = 1,
popup = ~popup, color = ~pal(type))
leaflet(df) %>%
addTiles() %>%
addMarkers(lng = ~lng, lat = ~lat, weight = 1, popup = ~popup, color = ~pal(type))
leaflet(df) %>%
addTiles() %>%
addMarkers(lng = ~lng, lat = ~lat, weight = 1, popup = ~popup, color = ~pal(type))
leaflet(df) %>%
addTiles() %>%
addMarkers(lng = ~lng, lat = ~lat, popup = ~popup, color = ~pal(type))
leaflet(df) %>%
addTiles() %>%
addMarkers(lng = ~lng, lat = ~lat, popup = ~popup)
library(leaflet)
# legend html generator:
markerLegendHTML <- function(IconSet) {
# container div:
legendHtml <- "<div style='padding: 10px; padding-bottom: 10px;'><h4 style='padding-top:0; padding-bottom:10px; margin: 0;'> Marker Legend </h4>"
n <- 1
# add each icon for font-awesome icons icons:
for (Icon in IconSet) {
if (Icon[["library"]] == "fa") {
legendHtml<- paste0(legendHtml, "<div style='width: auto; height: 45px'>",
"<div style='position: relative; display: inline-block; width: 36px; height: 45px' class='awesome-marker-icon-",Icon[["markerColor"]]," awesome-marker'>",
"<i style='margin-left: 8px; margin-top: 11px; 'class= 'fa fa-",Icon[["icon"]]," fa-inverse'></i>",
"</div>",
"<p style='position: relative; top: -20px; display: inline-block; ' >", names(IconSet)[n] ,"</p>",
"</div>")
}
n<- n + 1
}
paste0(legendHtml, "</div>")
}
IconSet <- awesomeIconList(
"Regular Ship"   = makeAwesomeIcon(icon= 'ship', markerColor = 'green', iconColor = 'white', library = "fa"),
"Pirate Ship" = makeAwesomeIcon(icon= 'fire', markerColor = 'blue', iconColor = 'white', library = "fa")
)
# Some fake data
df <- sp::SpatialPointsDataFrame(
cbind(
(runif(20) - .5) * 10 - 90.620130,  # lng
(runif(20) - .5) * 3.8 + 25.638077  # lat
),
data.frame(type = factor(
ifelse(runif(20) > 0.75, "Pirate Ship", "Regular Ship"),
c("Regular Ship", "Pirate Ship")
))
)
leaflet(df) %>% addTiles() %>%
addAwesomeMarkers(icon = ~IconSet[type]) %>%
addControl(html = markerLegendHTML(IconSet = IconSet), position = "bottomleft")
lat1= 36+runif(n=5,min=-1,max=1)
lon1 =-115+runif(n=5,min=-1,max=1)
lat2= 35+runif(n=5,min=-0.5,max=0.5)
lon2 =-110+runif(n=5,min=-0.5,max=0.5)
lat3= 34+runif(n=5,min=-0.5,max=0.5)
lon3 =-112+runif(n=5,min=-0.5,max=0.5)
data_all=rbind(data.frame(Longitude=lon1,Latitude=lat1,Group=1),
data.frame(Longitude=lon2,Latitude=lat2,Group=2),
data.frame(Longitude=lon3,Latitude=lat3,Group=3))
data_all$color <- rep(c("red", "green", "gray"), 5)
data_all$color <- rep(c("red", "green", "gray"), 5)
# add icon label column
data_all <- data_all %>%
mutate(icon = case_when(
Group == 1 ~ "home",
Group == 2 ~ "cog",
Group == 3 ~ "camera"))
# create awesome icons
my_icons <- awesomeIcons(icon = data_all$icon,
markerColor = data_all$color,
library = "glyphicon")
# leaflet using AwesomeMarkers
data_all %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ Longitude, lat = ~ Latitude, icon = ~ my_icons[Group])
doc <- tags$html(
tags$body(
a(href="http://www.lalala.com"))
)
cat(as.character(doc))
shiny::runApp('ddd')
install.packages("shinymaterial")
runApp('ddd')
runApp('ddd')
shiny::actionButton("test", "button")
<button id="test" type="button" class="btn btn-default action-button">button</button>
shiny::actionLink("test", "button")
runApp('ddd')
runApp('ddd')
runApp('ddd')
shiny::runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
shiny::runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
shiny::runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
library(ggplot2)
ggplot(sleep, aes(ID, extra, fill=group))+geom_bar(stat='identity')+coord_flip()
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
shiny::runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
shiny::runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('ddd')
runApp('ddd')
runApp('ddd')
runApp('ddd')
runApp('ddd')
runApp('ddd')
runApp('ddd')
runApp('ddd')
runApp('ddd')
runApp('ddd')
runApp('ddd')
runApp('ddd')
runApp('ddd')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
runApp('C:/MOTIVE_Ecosystem/R/Programs/ecosystem')
